version: '3.9'

services:
  frontend:
    build:
      context: ./frontend/
      dockerfile: Local.dockerfile
    expose:
      - 8080
    volumes:
      - ./frontend/:/app
      - /app/node_modules
    env_file:
      - ./frontend/.env

  db:
    image: postgres:alpine
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      
  backend:
    build: ./backend/
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./backend:/app
    expose:
      - 8000
    depends_on:
      - db
    env_file:
      - ./backend/.env

  backend_nginx:
    image: "nginx"
    volumes:
      - type: bind
        source: ./backend/nginx/local.flrchain.conf
        target: /etc/nginx/conf.d/defaut.conf
        read_only: true
      - ./backend/static:/static
      - ./backend/media:/media
    depends_on:
      - backend
    ports:
      - 8000:8000

  frontend_nginx:
    image: "nginx"
    restart: unless-stopped
    volumes:
      - type: bind
        source: ./frontend/nginx/local.flrchain.conf
        target: /etc/nginx/conf.d/default.conf
        read_only: true
    depends_on:
      - frontend
    ports:
      - 8080:8080

  algorand:
    image: algorand/testnet:latest
    tty: true
    command: ./algod -l 0.0.0.0:4161 -d data
    ports:
      - 4161:4161
    volumes:
      - algorand_node:/root/node/
      - algorand_data:/root/node/data/

  redis:
    image: redis:alpine
    restart: unless-stopped

  celery:
    restart: unless-stopped
    build: ./backend/
    command: celery -A flrchain_backend worker -l info
    volumes:
      - ./backend:/app
    env_file:
      - ./backend/.env
    depends_on:
      - db
      - redis
      - backend

  celery_beat:
    restart: unless-stopped
    build: ./backend/
    command: "celery -A flrchain_backend beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler"
    depends_on:
      - db
      - redis
      - backend
      - celery 

volumes:
  postgres_data:
  algorand_data:
  algorand_node:
